name: Azure Pipelines
variables:

  python.version: '3.7.6'
stages:
# - stage: Running_Infastructure_as_Code
#   jobs:
#   - job: Build
#     pool:
#       vmImage: ubuntu-20.04
#     steps:
#     # Variable file for creating terraform resources
#     - task: DownloadSecureFile@1
#       name: downloadtfvars
#       displayName: Download terraform.tfvars
#       inputs:
#         secureFile: 'terraform.tfvars'

#     # Needed for Terraform VM deployment
#     - task: DownloadSecureFile@1
#       name: downloadSSHKey
#       displayName: Download SSH Key
#       inputs:
#         secureFile: 'id_rsa.pub'
#     - task: InstallSSHKey@0
#       inputs:
#         knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
#         sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/18rZR36phPmFC2u5b2/RK5S5uALnAYPfOs2WTKobrU+Iv4pXwVomVCdjODZygNFE9QXiE4R+cKo6qfivg4I7MOXrSukRAm8fzaoAmkByM4myHMXQGHQ0vEsoB0X80VsSFbY7/nciD66YPYNHWzJsgXLuZnQOjOc2ZugXL012kEbcrNEv3Su04U6DhBq1Qej7bUvTxCGafXb81jL5fJ83f2KMXBetZgYp9tUwVaLE7ibtaGlW3vCpotin+tyyiHdFnJ5OXSPC8ewtIT72/Hzlnc5EXOfQLKSfx7zupbuUL2KebSplRDxMortaeyKFUCuVSC4l0PPEoOLt4k/p7Luax03eWDrnQCdNTrCtDshSx4tiRMOPlXPOuuUR2cQOYnDz5IpGXxrHOghSz0qEWtV7jipoqNbf3B9c8Nz1VjZfIogVqw6EC4N3Ruth+pzQpWLfcg2SblpsSASHurE7TrSmu0ViR0QQPzQkm/oyWBcRoBkLEO1l7Cp0z1QnyR1QLlEwwGBBmcDoRJ56YX2Ak/ldxzmXzE/9rMrjLT7QB4KEPEz7V+V9Xt/x0a0OZWqKjNfUsO9HmuxwHdM7aIRRD5lTlqNI9SlAwg68vUzuJ9Ldx3ssV+33g9s/TmNJNfsU5XqasasyV3ixXOlHemtpknq6UDXFSAVw25uc1ytaBD9efQ== asus@NHI'
#         sshPassphrase: '12345'
#         sshKeySecureFile: 'id_rsa'
#     - task: CopyFiles@2
#       displayName: Copy variable file to terraform folder
#       inputs:
#         SourceFolder: '$(Agent.TempDirectory)'
#         Contents: '**'
#         TargetFolder: '$(System.DefaultWorkingDirectory)/terraform'
#         OverWrite: true
#     - task: TerraformInstaller@0
#       displayName: install terraform
#       inputs:
#         terraformVersion: 'latest'

#     - task: TerraformTaskV3@3
#       displayName: 'Init Terraform'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         backendServiceArm: 'deploy terraform'
#         backendAzureRmResourceGroupName: 'az-terraform'
#         backendAzureRmStorageAccountName: 'terraformstoragedatmq'
#         backendAzureRmContainerName: 'terraform'
#         backendAzureRmKey: 'terraformState'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#     - task: TerraformTaskV3@3
#       displayName: 'Validate Terraform'
#       inputs:
#         provider: 'azurerm'
#         command: 'validate'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#     - task: TerraformTaskV3@3
#       displayName: 'Plan Terraform'
#       inputs:
#         provider: 'azurerm'
#         command: 'plan'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         commandOptions: '-out=tfplan -var-file=terraform.tfvars -var="ssh_public_key_path=$(downloadSSHKey.secureFilePath)"'
#         environmentServiceNameAzureRM: 'deploy terraform'
#     - task: TerraformTaskV3@3
#       displayName: 'Apply Terraform'
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         commandOptions: '"tfplan"'
#         environmentServiceNameAzureRM: 'deploy terraform'

# - stage: Build
#   jobs:
#   - job: Build
#     pool:
#       vmImage: ubuntu-20.04
#     steps:
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: drop-fakerestapi
    
    
# - stage: Deploy
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: ubuntu-20.04
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: 'deploy terraform'
#               appName: 'datmq-AppService'
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


- stage: Integration_Test
  jobs:
    - job: Running_Integration_Test_With_Newman_Posman
      pool:
        vmImage: ubuntu-20.04
      steps:
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'sudo npm install -g newman'
          workingDirectory: $(System.DefaultWorkingDirectory)
      - task: CmdLine@2
        displayName: Run Regression Tests
        continueOnError: true
        inputs:
          script: 'newman run starterapis.json'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'