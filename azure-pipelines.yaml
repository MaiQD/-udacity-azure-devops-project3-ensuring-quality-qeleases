name: Azure Pipelines
variables:

  python.version: '3.7.6'
stages:
# - stage: Running_Infastructure_as_Code
#   jobs:
#   - job: Build
#     pool:
#       vmImage: ubuntu-20.04
#     steps:
#     # Variable file for creating terraform resources
#     - task: DownloadSecureFile@1
#       name: downloadtfvars
#       displayName: Download terraform.tfvars
#       inputs:
#         secureFile: 'terraform.tfvars'

#     # Needed for Terraform VM deployment
#     - task: DownloadSecureFile@1
#       name: downloadSSHKey
#       displayName: Download SSH Key
#       inputs:
#         secureFile: 'id_rsa.pub'
#     - task: InstallSSHKey@0
#       inputs:
#         knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
#         sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/18rZR36phPmFC2u5b2/RK5S5uALnAYPfOs2WTKobrU+Iv4pXwVomVCdjODZygNFE9QXiE4R+cKo6qfivg4I7MOXrSukRAm8fzaoAmkByM4myHMXQGHQ0vEsoB0X80VsSFbY7/nciD66YPYNHWzJsgXLuZnQOjOc2ZugXL012kEbcrNEv3Su04U6DhBq1Qej7bUvTxCGafXb81jL5fJ83f2KMXBetZgYp9tUwVaLE7ibtaGlW3vCpotin+tyyiHdFnJ5OXSPC8ewtIT72/Hzlnc5EXOfQLKSfx7zupbuUL2KebSplRDxMortaeyKFUCuVSC4l0PPEoOLt4k/p7Luax03eWDrnQCdNTrCtDshSx4tiRMOPlXPOuuUR2cQOYnDz5IpGXxrHOghSz0qEWtV7jipoqNbf3B9c8Nz1VjZfIogVqw6EC4N3Ruth+pzQpWLfcg2SblpsSASHurE7TrSmu0ViR0QQPzQkm/oyWBcRoBkLEO1l7Cp0z1QnyR1QLlEwwGBBmcDoRJ56YX2Ak/ldxzmXzE/9rMrjLT7QB4KEPEz7V+V9Xt/x0a0OZWqKjNfUsO9HmuxwHdM7aIRRD5lTlqNI9SlAwg68vUzuJ9Ldx3ssV+33g9s/TmNJNfsU5XqasasyV3ixXOlHemtpknq6UDXFSAVw25uc1ytaBD9efQ== asus@NHI'
#         sshPassphrase: '12345'
#         sshKeySecureFile: 'id_rsa'
#     - task: CopyFiles@2
#       displayName: Copy variable file to terraform folder
#       inputs:
#         SourceFolder: '$(Agent.TempDirectory)'
#         Contents: '**'
#         TargetFolder: '$(System.DefaultWorkingDirectory)/terraform'
#         OverWrite: true
#     - task: TerraformInstaller@0
#       displayName: install terraform
#       inputs:
#         terraformVersion: 'latest'

#     - task: TerraformTaskV3@3
#       displayName: 'Init Terraform'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         backendServiceArm: 'deploy terraform'
#         backendAzureRmResourceGroupName: 'az-terraform'
#         backendAzureRmStorageAccountName: 'terraformstoragedatmq'
#         backendAzureRmContainerName: 'terraform'
#         backendAzureRmKey: 'terraformState'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#     - task: TerraformTaskV3@3
#       displayName: 'Validate Terraform'
#       inputs:
#         provider: 'azurerm'
#         command: 'validate'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#     - task: TerraformTaskV3@3
#       displayName: 'Plan Terraform'
#       inputs:
#         provider: 'azurerm'
#         command: 'plan'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         commandOptions: '-out=tfplan -var-file=terraform.tfvars -var="ssh_public_key_path=$(downloadSSHKey.secureFilePath)"'
#         environmentServiceNameAzureRM: 'deploy terraform'
#     - task: TerraformTaskV3@3
#       displayName: 'Apply Terraform'
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         commandOptions: '"tfplan"'
#         environmentServiceNameAzureRM: 'deploy terraform'

- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-20.04
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive Selenium Files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
        artifact: 'selenium'
        publishLocation: 'pipeline'
    
- stage: Deploy
  jobs:
  #  - deployment: FakeRestAPI
    # pool:
    #   vmImage: ubuntu-20.04
    # environment: 'TEST'
    # strategy:
    #   runOnce:
    #     deploy:
    #       steps:
    #       - task: AzureWebApp@1
    #         displayName: 'Deploy Azure Web App'
    #         inputs:
    #           azureSubscription: 'deploy terraform'
    #           appName: 'datmq-AppService'
    #           appType: webApp
    #           package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: 'Deploy VM'
    environment:
      name:  VM_TEST
      resourceType: VirtualMachine
      # tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium


                export PATH=$PATH:/home/datmq1/chromedriver_linux64/
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'selenium'
              targetPath: '$(Pipeline.Workspace)/selenium'
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/selenium/*.zip'
              destinationFolder: '$(Pipeline.Workspace)/selenium/tests'
              cleanDestinationFolder: true
              overwriteExistingFiles: true
          - task: Bash@3
            displayName: 'Show file in folder selenium'
            inputs:
              targetType: 'inline'
              script: |
                echo "$PWD"
                
                echo 'Show folder selenium/tests'
                ls -1 tests 

                echo 'remove zip file'
                rm *.zip
                echo 'Create folder selenium/logs'
                mkdir -p logs

                echo 'Show folder selenium'
                ls -1 
              workingDirectory: '$(Pipeline.Workspace)/selenium'
# - stage: Integration_Test
#   jobs:
#     - job: Running_Integration_Test_With_Newman_Posman
#       pool:
#         vmImage: ubuntu-20.04
#       steps:
#       - task: CmdLine@2
#         displayName: Install Newman
#         inputs:
#           script: 'sudo npm install -g newman'
#           workingDirectory: $(System.DefaultWorkingDirectory)
#       - task: CmdLine@2
#         displayName: Run Regression Tests
#         continueOnError: true
#         inputs:
#           script: 'newman run AzureDevOpsRegressionTest.postman_collection.json -e StarterApi.postman_environment.json --reporters cli,junit --reporter-junit-export junit-regression-report.xml'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#       - task: CmdLine@2
#         displayName: Run Validation Tests
#         continueOnError: true
#         inputs:
#           script: 'newman run AzureDevOpsValidationTest.postman_collection.json -e StarterApi.postman_environment.json --reporters cli,junit --reporter-junit-export junit-validation-report.xml'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#       - task: PublishTestResults@2
#         inputs:
#           testResultsFormat: 'JUnit'
#           testResultsFiles: '**/junit-*-report.xml'
#           searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#           testRunTitle: 'Publish test results'

# - stage: JMeter_Tests
#   jobs:
#     - job: Running_Performance_Tests_With_JMeter
#       pool:
#         vmImage: ubuntu-20.04
#       steps:
#       - task: JMeterInstaller@0
#         displayName: 'Install JMeter'
#         inputs:
#           jmeterVersion: '5.4.2'
#       - task: Bash@3
#         displayName: 'Run JMeter Stress Tests'
#         inputs:
#           targetType: 'inline'
#           script: |
#             # Write your commands here
#             mkdir log
#             jmeter -n -t StressTests.jmx \
#             -l log/StressTestsResults.csv \
#             -e -o log/StressTestsReport
#           workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
#       - task: Bash@3
#         displayName: 'Run JMeter Endurance Tests'
#         inputs:
#           targetType: 'inline'
#           script: |
#             jmeter -n -t EnduranceTests.jmx \
#             -l log/EnduranceTestsResults.csv \
#             -e -o log/EnduranceTestsReport
#             ls -1 log
#           workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
      
#       - task: publishhtmlreport@1
#         displayName: 'Export JMeter Stress Tests Report'
#         inputs:
#           htmlType: 'Jmeter'
#           JmeterReportsPath: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/StressTestsReport'
#       - task: publishhtmlreport@1
#         displayName: 'Export JMeter Endurance Tests Report'
#         inputs:
#           htmlType: 'Jmeter'
#           JmeterReportsPath: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/EnduranceTestsReport'
#       - task: ArchiveFiles@2
#         displayName: "Archive Report file to zip"
#         inputs:
#           rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/'
#           includeRootFolder: true
#           archiveType: 'zip'
#           archiveFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/Report-$(Build.BuildId).zip'
#           replaceExistingArchive: true
#       - task: PublishPipelineArtifact@1
#         inputs:
#           targetPath: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/Report-$(Build.BuildId).zip'
#           publishLocation: 'pipeline'
#       - task: Bash@3
#         displayName: 'Print jmeter log'
#         inputs:
#           targetType: 'inline'
#           script: 'cat jmeter.log'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'

- stage: UI_Test_with_Selenium
  jobs:
  - deployment: VMSeleniumTests
    displayName: 'Running Selenium tests'
    environment:
      name: VM_TEST
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              displayName: 'Run Selenium tests'
              inputs:
                targetType: 'inline'
                script: |
                  # Set Path environment 
                  export PATH=$PATH:/home/datmq1/chromedriver_linux64/
                  #run test
                  #python3 login.py > ../logs/ui-logs-$(Build.BuildId).log
                  python3 login.py | tee -a ../logs/ui-logs-$(Build.BuildId).log
                  sudo chmod 775 ../logs/ui-logs-$(Build.BuildId).log
                  cat ../logs/ui-logs-$(Build.BuildId).log
                workingDirectory: '$(Pipeline.Workspace)/selenium/tests'